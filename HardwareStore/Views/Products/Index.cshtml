@using HardwareStore.Core
@model PaginationResponse<HardwareStore.Data.Entities.Products>

@inject HardwareStore.Services.IUsersService _usersService

@{
    ViewData["Title"] = "Productos";
}

<style>
    body {
        background-color: #f8f9fa;
    }

    .main-container {
        display: flex;
        justify-content: right;
        align-items: right;
        min-height: 100vh;
        margin-top: 0px;
    }

    .card {
        width: 100%;
        max-width: 1720px;
        margin: 20px;
        padding: 20px;
    }

    .btn-custom {
        background-color: #007bff;
        color: white;
        border-radius: 30px;
        padding: 10px 20px;
        font-size: 16px;
    }

        .btn-custom:hover {
            background-color: #0056b3;
        }

    .btn-outline-custom {
        border-color: #007bff;
        color: #007bff;
        border-radius: 30px;
        padding: 10px 20px;
        font-size: 16px;
    }

        .btn-outline-custom:hover {
            background-color: #007bff;
            color: white;
        }

    .table thead th {
        background-color: #007bff;
        color: white;
    }

    .table tbody tr:hover {
        background-color: #f1f1f1;
    }

    .table {
        width: 100%;
        table-layout: fixed; /* Esto hace que las columnas tengan el mismo ancho */
    }

        .table th, .table td {
            width: 0.1%; /* Esto establece el ancho de las columnas */
            overflow: hidden; /* Esto evita que el contenido se desborde */
            text-overflow: ellipsis; /* Esto hace que el texto que no cabe se reemplace con '...' */
            white-space: nowrap; /* Esto evita que las palabras se rompan en varias líneas */
            text-align: center; /* Esto centra el texto horizontalmente */
            vertical-align: middle; /* Esto centra el texto verticalmente */
        }

            .table th:first-child, .table td:first-child {
                width: 0.5%;
                }


    .badge {
        padding: 0.5em;
        font-size: 0.9em;
    }

    .pagination {
        justify-content: center;
        padding-top: 20px;
    }

        .pagination li {
            list-style: none;
            display: inline;
        }

        .pagination .page-link {
            border-radius: 30px;
            padding: 10px 20px;
            margin: 0 5px;
            color: #007bff;
            border: 1px solid #007bff;
            text-decoration: none;
        }

            .pagination .page-link:hover {
                background-color: #007bff;
                color: white;
            }

        .pagination .active .page-link {
            background-color: #007bff;
            color: white;
            border: none;
        }

    .btnDelete i {
        color: red;
    }

    .action-icons {
        display: flex;
        justify-content: center;
        gap: 10px;
    }

        .action-icons a, .action-icons button {
            background: none;
            border: none;
            padding: 0;
            cursor: pointer;
            color: inherit;
        }

            .action-icons a:hover, .action-icons button:hover {
                color: #0056b3;
            }

        .action-icons .btnDelete:hover i {
            color: #c82333;
        }
</style>


<div class="main-container">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white text-center">
            <h3>@ViewData["Title"]</h3>
        </div>
        <div class="card-body">
            @if (await _usersService.CurrentUserIsAuthorizedAsync("createProducts", "Products"))
            {
                <div class="text-end mb-4">
                    <button class="btn btn-custom" onclick="window.location.href='/Products/Create'">
                        <i class="fas fa-plus-circle"></i> Nuevo Producto
                    </button>
                </div>
            }

            <form class="d-flex mb-4" asp-action="Index" method="GET">
                <input type="hidden" name="Page" value="@Model.CurrentPage" />
                <input type="hidden" name="RecordsPerPage" value="@Model.RecordsPerPage" />
                <div class="input-group w-100">
                    <input type="text" class="form-control" placeholder="Buscar..." asp-for="Filter" name="Filter">
                    <button class="btn btn-custom" type="submit">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </form>

            @if (Model != null && Model.List != null && Model.List.Any())
            {
                <div class="table-responsive">
                    <table class="table table-bordered text-center">
                        <thead class="table-dark">
                            <tr>
                                <th>Nombre</th>
                                <th>Precio</th>
                                <th>Stock</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.List)
                            {
                                <tr>
                                    <td>@Html.DisplayFor(modelItem => item.Name)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Price)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Stock)</td>
                                    <td>
                                        <div class="action-icons">
                                            @if (await _usersService.CurrentUserIsAuthorizedAsync("updateProducts", "Products"))
                                            {
                                                <a asp-action="Edit" asp-route-id="@item.Id">
                                                    <i class="fas fa-pencil-alt"></i>
                                                </a>
                                            }
                                            @if (await _usersService.CurrentUserIsAuthorizedAsync("deleteProducts", "Products"))
                                            {
                                                <form asp-action="Delete" method="post" class="deleteForm" data-id="@item.Id" onsubmit="return false;">
                                                    <input type="hidden" name="id" value="@item.Id" />
                                                    <button type="button" class="btnDelete">
                                                        <i class="fas fa-trash-alt"></i>
                                                    </button>
                                                </form>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Paginación -->
                <nav aria-label="Page navigation example">
                    <ul class="pagination">
                        @if (Model.CurrentPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { Page = Model.CurrentPage - 1, RecordsPerPage = Model.RecordsPerPage, Filter = Model.Filter })">
                                    Anterior
                                </a>
                            </li>
                        }
                        @for (int i = 1; i <= Model.TotalPages; i++)
                        {
                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { Page = i, RecordsPerPage = Model.RecordsPerPage, Filter = Model.Filter })">
                                    @i
                                </a>
                            </li>
                        }
                        @if (Model.CurrentPage < Model.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { Page = Model.CurrentPage + 1, RecordsPerPage = Model.RecordsPerPage, Filter = Model.Filter })">
                                    Siguiente
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
            }
            else
            {
                <div class="alert alert-warning text-center" role="alert">
                    No se encontraron productos.
                </div>
            }
        </div>
    </div>
</div>

<button class="btn btn-outline-secondary mt-4" type="button" onclick="window.location.href='/Home/Index'">Volver</button>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.btnDelete').forEach(function (button) {
                button.addEventListener('click', function () {
                    var form = this.closest('form');
                    Swal.fire({
                        title: '¿Estás seguro?',
                        text: '¡No podrás revertir esto!',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#007bff',
                        confirmButtonText: 'Sí, eliminarlo!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            form.submit();
                        }
                    });
                });
            });
        });
    </script>
}
